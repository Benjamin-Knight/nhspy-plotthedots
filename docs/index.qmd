---
pagetitle: "nhspy-plotthedots"
css: index.css
editor: source
description: | 
  Calculate control limits and draw statistical process control (SPC) charts in python.
comments: false
---

:::: {.hero-banner}

::: {.hero-image .hero-image-left}
:::

::: {.content-block}

# nhspy-plotthedots <span>v0.1.6 (alpha)</span>

### Calculate control limits and draw XmR charts in python.

::: {.hero-buttons}
[Read the Docs](tutorials/index.qmd){.btn-action-primary .btn-action .btn .btn-success .btn-lg role="button"}
<!-- [Read the docs](documentation/index.qmd){.btn-action-primary .btn-action .btn .btn-success .btn-lg role="button"}
[Latest](updates.qmd){.btn-action-primary .btn-action .btn .btn-success .btn-lg role="button"} -->
::: 

:::

::: {.hero-image .hero-image-right}
:::

::::
</br>
Welcome to the NHS Python Communityâ€™s python version of the NHS-Rplotthedots package. 

The [NHSR Plot the Dots](https://github.com/nhs-r-community/NHSRplotthedots) package was built by the [NHS-R community](https://nhsrcommunity.com) to provide tools for drawing statistical process control (SPC) charts. The package supports the NHS England programme ['Making Data Count'](https://www.england.nhs.uk/publication/making-data-count/). The programme encourages boards, managers, and analyst teams to present data in ways that show change over time, and drive better understanding of indicators than 'RAG' (red, amber, green) rated reports often present.

::: {.callout-note}
## Note
Please be aware that this package is in the early stages of development, and features may change.
:::

## Quick Start

Below is a simple example of the type of chart the package produces. We will use the `ae_attendances` dataset from the [NHSRdatasets](https://github.com/nhs-r-community/NHSRdatasets) package and a bit of `pandas` code to select some organisations.

### Install and load some libraries
```{python}
# Install libs from test PIPY
%pip install --index-url https://test.pypi.org/simple/ --no-deps nhspy-plotthedots-test

# Import libs
import pandas as pd
from datetime import datetime
import plotly.io as pio
pio.renderers.default = "plotly_mimetype+notebook"
```

### Load the data into `pandas`
```{python}
# File path of the CSV file
url = 'https://raw.githubusercontent.com/nhs-pycom/nhspy-plotthedots/main/nhspy_plotthedots/data/ae_attendances.csv'

# Read the CSV file and store it in a DataFrame
df = pd.read_csv(url)

# Convert 'period' column to datetime format
df['period'] = pd.to_datetime(df['period'])

# Create a subset of the DataFrame based on certain conditions
sub_set = df[(df['org_code'] == "RQM") & (df['type'] == "1") & (df['period'] < datetime(2018, 4, 1))]
sub_set = sub_set.sort_values(by='period').reset_index(drop=True)

sub_set.head()
```

### Calculate the control limits
```{python}
from nhspy_plotthedots import pandas_spc_calculations

# calculate control limits
spc = pandas_spc_calculations.pandas_spc_x_calc(sub_set, 'breaches')
spc.head()
```

### Plot the `plotly` SPC chart
```{python}
#| label: fig-4-hour-breach
#| fig-cap: Number of A&E attendance 4-Hour Breaches
#| fig-align: center
from nhspy_plotthedots import plotly_spc_chart

# plot SPC chart
plotly_spc_chart.plotly_spc_chart(spc, 'breaches', 'period', plot_title = 'Chelsea & Westminster Hospital NHS Foundation Trust (RQM)', x_lab = 'Month of attendance', y_lab = 'Number of 4-Hour Target Breaches')
```

## NHS-R slack

If you want to learn more about this project, please join the discussion at the [NHS-R Community Slack group](https://nhsrcommunity.slack.com/) and the specific channel [#proj-nhsr-plot-the-dots](https://nhsrcommunity.slack.com/archives/CSVD4SYF3).